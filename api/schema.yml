openapi: 3.0.3
info:
  title: Sinta API
  version: 1.0.0
  description: Endpoint documentation for Sinta running Django DRF.
paths:
  /api/auth/login/:
    post:
      operationId: auth_login_create
      description: |-
        Check the credentials and return the REST Token
        if the credentials are valid and authenticated.
        Calls Django Auth login method to register User ID
        in Django session framework

        Accept the following POST parameters: username, password
        Return the REST Framework Token Object's key.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
          description: ''
  /api/auth/login-with-code/:
    post:
      operationId: auth_login_with_code_create
      description: |-
        Check the credentials and return the REST Token
        if the credentials are valid and authenticated.
        Calls Django Auth login method to register User ID
        in Django session framework

        Accept the following POST parameters: username, password
        Return the REST Framework Token Object's key.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
          description: ''
  /api/auth/logout/:
    post:
      operationId: auth_logout_create
      description: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.

        Accepts/Returns nothing.
      tags:
      - auth
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/auth/mocklogin/:
    post:
      operationId: auth_mocklogin_create
      description: |-
        Class for handling Mock-login. Does not require any params, and can be
        executed with an empty json.
      tags:
      - auth
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
                description: Unspecified response body
              examples:
                Login:
                  value:
                    access: eyJhbGciOiJIUzI1Ni..CJ9
                    refresh: eyJhbGciOiJIUzI1Ni...v_E
                  summary: !!set
                    Successful login response: null
          description: Login Successful
  /api/auth/token/refresh/:
    post:
      operationId: auth_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/auth/token/verify/:
    post:
      operationId: auth_token_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerify'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
  /api/company/companies/:
    get:
      operationId: company_companies_list
      description: |-
        Manages company CRUD actions.
        Utilizes CompanySerializer for data validation and serialization.
        Requires user authentication
      tags:
      - company
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Company'
          description: ''
    post:
      operationId: company_companies_create
      description: |-
        Manages company CRUD actions.
        Utilizes CompanySerializer for data validation and serialization.
        Requires user authentication
      tags:
      - company
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Company'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Company'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Company'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
              examples:
                CreateCompany:
                  value:
                    name: Example Company
                  summary: Create a new company
                  description: Response for successfully creating a company
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/company/companies/{id}/:
    get:
      operationId: company_companies_retrieve
      description: |-
        Manages company CRUD actions.
        Utilizes CompanySerializer for data validation and serialization.
        Requires user authentication
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this company.
        required: true
      tags:
      - company
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
              examples:
                RetrieveCompany:
                  value:
                    id: Example_id
                    name: Example Company
                    created_at: '2024-01-01T01:12:13.123456Z'
                    updated_at: '2024-01-01T01:12:13.123456Z'
                    deleted_at: null
                  summary: Retrieve a specific company
                  description: Response for successfully retrieving a company's details.
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    put:
      operationId: company_companies_update
      description: |-
        Manages company CRUD actions.
        Utilizes CompanySerializer for data validation and serialization.
        Requires user authentication
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this company.
        required: true
      tags:
      - company
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Company'
            examples:
              UpdateCompany:
                value:
                  name: Updated Company Name
                summary: Update a company's information
                description: Request to update a company's name.
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Company'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Company'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    patch:
      operationId: company_companies_partial_update
      description: |-
        Manages company CRUD actions.
        Utilizes CompanySerializer for data validation and serialization.
        Requires user authentication
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this company.
        required: true
      tags:
      - company
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCompany'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCompany'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCompany'
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
          description: ''
    delete:
      operationId: company_companies_destroy
      description: |-
        Manages company CRUD actions.
        Utilizes CompanySerializer for data validation and serialization.
        Requires user authentication
      parameters:
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this company.
        required: true
      tags:
      - company
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /api/company/department/members:
    get:
      operationId: company_department_members_list
      tags:
      - company
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DepartmentMembers'
          description: ''
    post:
      operationId: company_department_members_create
      description: Endpoint to add members to a department.
      tags:
      - company
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepartmentMembers'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DepartmentMembers'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DepartmentMembers'
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepartmentMembers'
          description: ''
    put:
      operationId: company_department_members_update
      tags:
      - company
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepartmentMembers'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DepartmentMembers'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DepartmentMembers'
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepartmentMembers'
          description: ''
    delete:
      operationId: company_department_members_destroy
      description: Endpoint to remove members from a department.
      tags:
      - company
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '204':
          description: No response body
  /api/company/departments:
    get:
      operationId: company_departments_list
      description: |-
        Manages company CRUD actions.
        Utilizes CompanySerializer for data validation and serialization.
        Requires user authentication
      tags:
      - company
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Department'
          description: ''
    post:
      operationId: company_departments_create
      description: |-
        Manages company CRUD actions.
        Utilizes CompanySerializer for data validation and serialization.
        Requires user authentication
      tags:
      - company
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Department'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Department'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Department'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
          description: ''
    put:
      operationId: company_departments_update
      description: |-
        Manages company CRUD actions.
        Utilizes CompanySerializer for data validation and serialization.
        Requires user authentication
      tags:
      - company
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Department'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Department'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Department'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
          description: ''
    delete:
      operationId: company_departments_destroy
      description: |-
        Manages company CRUD actions.
        Utilizes CompanySerializer for data validation and serialization.
        Requires user authentication
      tags:
      - company
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '204':
          description: No response body
  /api/company/members:
    get:
      operationId: company_members_list
      tags:
      - company
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CompanyMember'
          description: ''
    post:
      operationId: company_members_create
      parameters:
      - in: query
        name: company_id
        schema:
          type: string
        description: ID of the company
      tags:
      - company
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCompanyMemberAction'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AddCompanyMemberAction'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AddCompanyMemberAction'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommonResponse'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
    put:
      operationId: company_members_update
      tags:
      - company
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCompanyMemberAction'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AddCompanyMemberAction'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AddCompanyMemberAction'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddCompanyMemberAction'
          description: ''
    delete:
      operationId: company_members_destroy
      tags:
      - company
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '204':
          description: No response body
  /api/export_to_pdf:
    get:
      operationId: export_to_pdf_retrieve
      tags:
      - export_to_pdf
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
  /api/files/:
    get:
      operationId: files_list
      tags:
      - files
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/File'
          description: ''
    post:
      operationId: files_create
      tags:
      - files
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/File'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/File'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/File'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
          description: ''
  /api/files/{id}/:
    get:
      operationId: files_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - files
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
          description: ''
    delete:
      operationId: files_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - files
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '204':
          description: No response body
  /api/interview-rounds/:
    get:
      operationId: interview_rounds_retrieve
      tags:
      - interview-rounds
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
  /api/interview-rounds/{interview_round_id}:
    get:
      operationId: interview_rounds_retrieve_2
      parameters:
      - in: path
        name: interview_round_id
        schema:
          type: integer
        required: true
      tags:
      - interview-rounds
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
  /api/interview-rounds/{interview_round_id}/{question_id}:
    get:
      operationId: interview_rounds_retrieve_3
      parameters:
      - in: path
        name: interview_round_id
        schema:
          type: integer
        required: true
      - in: path
        name: question_id
        schema:
          type: integer
        required: true
      tags:
      - interview-rounds
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
  /api/interview-rounds/{interview_round_id}/update/:
    put:
      operationId: interview_rounds_update_update
      parameters:
      - in: path
        name: interview_round_id
        schema:
          type: integer
        required: true
      tags:
      - interview-rounds
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
  /api/interview-rounds/{room_id}:
    get:
      operationId: interview_rounds_retrieve_4
      parameters:
      - in: path
        name: room_id
        schema:
          type: string
        required: true
      tags:
      - interview-rounds
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
  /api/interview-rounds/GetTranscriptFromS3/{interview_round_id}/:
    get:
      operationId: interview_rounds_GetTranscriptFromS3_retrieve
      parameters:
      - in: path
        name: interview_round_id
        schema:
          type: integer
        required: true
      tags:
      - interview-rounds
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
  /api/interview-rounds/candidate/:
    get:
      operationId: interview_rounds_candidate_list
      tags:
      - interview-rounds
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Candidate'
          description: ''
    post:
      operationId: interview_rounds_candidate_create
      tags:
      - interview-rounds
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Candidate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Candidate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Candidate'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Candidate'
          description: ''
    delete:
      operationId: interview_rounds_candidate_destroy
      tags:
      - interview-rounds
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '204':
          description: No response body
  /api/interview-rounds/check-content/{round_id}/:
    get:
      operationId: interview_rounds_check_content_retrieve
      description: Check if an interview round has recordings, notes, or ratings,
        and delete it if empty.
      parameters:
      - in: path
        name: round_id
        schema:
          type: integer
        required: true
      tags:
      - interview-rounds
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
  /api/interview-rounds/create/:
    post:
      operationId: interview_rounds_create_create
      tags:
      - interview-rounds
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '201':
          description: No response body
  /api/interview-rounds/interviewRoundVideo/{interview_round_id}/:
    get:
      operationId: interview_rounds_interviewRoundVideo_retrieve
      parameters:
      - in: path
        name: interview_round_id
        schema:
          type: integer
        required: true
      tags:
      - interview-rounds
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
  /api/interview-rounds/interviewroundquestions/:
    get:
      operationId: interview_rounds_interviewroundquestions_list
      tags:
      - interview-rounds
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InterviewRoundQuestion'
          description: ''
    post:
      operationId: interview_rounds_interviewroundquestions_create
      tags:
      - interview-rounds
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterviewRoundQuestion'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/InterviewRoundQuestion'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InterviewRoundQuestion'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewRoundQuestion'
          description: ''
    delete:
      operationId: interview_rounds_interviewroundquestions_destroy
      tags:
      - interview-rounds
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '204':
          description: No response body
  /api/interview-rounds/rateInterviewRoundQuestion/:
    post:
      operationId: interview_rounds_rateInterviewRoundQuestion_create
      tags:
      - interview-rounds
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '201':
          description: No response body
  /api/question/:
    get:
      operationId: question_list
      tags:
      - question
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
          description: ''
    post:
      operationId: question_create
      tags:
      - question
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Question'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Question'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
          description: ''
    delete:
      operationId: question_destroy
      tags:
      - question
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '204':
          description: No response body
  /api/question/{id}/:
    get:
      operationId: question_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - question
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
          description: ''
    put:
      operationId: question_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - question
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Question'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Question'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
          description: ''
    patch:
      operationId: question_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - question
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedQuestion'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedQuestion'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedQuestion'
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
          description: ''
    delete:
      operationId: question_destroy_2
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - question
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '204':
          description: No response body
  /api/question/question-banks/:
    get:
      operationId: question_question_banks_list
      tags:
      - question
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuestionBank'
          description: ''
    post:
      operationId: question_question_banks_create
      tags:
      - question
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionBank'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/QuestionBank'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/QuestionBank'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionBank'
          description: ''
    delete:
      operationId: question_question_banks_destroy
      tags:
      - question
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '204':
          description: No response body
  /api/question/question-banks/{id}/:
    get:
      operationId: question_question_banks_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - question
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionBank'
          description: ''
    put:
      operationId: question_question_banks_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - question
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionBank'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/QuestionBank'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/QuestionBank'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionBank'
          description: ''
    patch:
      operationId: question_question_banks_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - question
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedQuestionBank'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedQuestionBank'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedQuestionBank'
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionBank'
          description: ''
    delete:
      operationId: question_question_banks_destroy_2
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - question
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '204':
          description: No response body
  /api/question/question-banks/{id}/delete/:
    get:
      operationId: question_question_banks_delete_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - question
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: question_question_banks_delete_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - question
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: question_question_banks_delete_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - question
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: question_question_banks_delete_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - question
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
  /api/question/question-banks/{id}/update/:
    get:
      operationId: question_question_banks_update_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - question
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionBankUpdate'
          description: ''
    put:
      operationId: question_question_banks_update_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - question
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionBankUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/QuestionBankUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/QuestionBankUpdate'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionBankUpdate'
          description: ''
    patch:
      operationId: question_question_banks_update_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - question
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedQuestionBankUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedQuestionBankUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedQuestionBankUpdate'
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionBankUpdate'
          description: ''
    delete:
      operationId: question_question_banks_update_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - question
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '204':
          description: No response body
  /api/question_response/interviewer-feedback/:
    get:
      operationId: question_response_interviewer_feedback_list
      tags:
      - question_response
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InterviewerFeedback'
          description: ''
    post:
      operationId: question_response_interviewer_feedback_create
      tags:
      - question_response
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterviewerFeedback'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/InterviewerFeedback'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InterviewerFeedback'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewerFeedback'
          description: ''
  /api/question_response/interviewer-feedback/{answer_id}/update-answers:
    get:
      operationId: question_response_interviewer_feedback_update_answers_retrieve
      parameters:
      - in: path
        name: answer_id
        schema:
          type: integer
        required: true
      tags:
      - question_response
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: question_response_interviewer_feedback_update_answers_create
      parameters:
      - in: path
        name: answer_id
        schema:
          type: integer
        required: true
      tags:
      - question_response
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: question_response_interviewer_feedback_update_answers_partial_update
      parameters:
      - in: path
        name: answer_id
        schema:
          type: integer
        required: true
      tags:
      - question_response
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
  /api/question_response/interviewer-feedback/{id}/:
    get:
      operationId: question_response_interviewer_feedback_list_2
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - question_response
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InterviewerFeedback'
          description: ''
    post:
      operationId: question_response_interviewer_feedback_create_2
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - question_response
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InterviewerFeedback'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/InterviewerFeedback'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InterviewerFeedback'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InterviewerFeedback'
          description: ''
  /api/question_response/question_summarized_answers/{interview_round_id}/:
    get:
      operationId: question_response_question_summarized_answers_retrieve
      parameters:
      - in: path
        name: interview_round_id
        schema:
          type: integer
        required: true
      tags:
      - question_response
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: question_response_question_summarized_answers_create
      parameters:
      - in: path
        name: interview_round_id
        schema:
          type: integer
        required: true
      tags:
      - question_response
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: question_response_question_summarized_answers_partial_update
      parameters:
      - in: path
        name: interview_round_id
        schema:
          type: integer
        required: true
      tags:
      - question_response
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
  /api/summary/{summary_id}/update-description/:
    patch:
      operationId: summary_update_description_partial_update
      parameters:
      - in: path
        name: summary_id
        schema:
          type: integer
        required: true
      tags:
      - summary
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
  /api/summary/generate/{interview_round_id}/:
    get:
      operationId: summary_generate_retrieve
      parameters:
      - in: path
        name: interview_round_id
        schema:
          type: integer
        required: true
      tags:
      - summary
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: summary_generate_create
      parameters:
      - in: path
        name: interview_round_id
        schema:
          type: integer
        required: true
      tags:
      - summary
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
  /api/templates/:
    get:
      operationId: templates_retrieve
      tags:
      - templates
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
  /api/templates/{template_id}/:
    get:
      operationId: templates_retrieve_2
      parameters:
      - in: path
        name: template_id
        schema:
          type: integer
        required: true
      tags:
      - templates
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
  /api/templates/{template_id}/questions/:
    get:
      operationId: templates_questions_retrieve
      parameters:
      - in: path
        name: template_id
        schema:
          type: integer
        required: true
      tags:
      - templates
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
  /api/templates/{template_id}/questions/add/:
    post:
      operationId: templates_questions_add_create
      parameters:
      - in: path
        name: template_id
        schema:
          type: integer
        required: true
      tags:
      - templates
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
  /api/templates/{template_id}/questions/edit/:
    put:
      operationId: templates_questions_edit_update
      parameters:
      - in: path
        name: template_id
        schema:
          type: integer
        required: true
      tags:
      - templates
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
  /api/templates/{template_id}/questions/remove/:
    delete:
      operationId: templates_questions_remove_destroy
      parameters:
      - in: path
        name: template_id
        schema:
          type: integer
        required: true
      tags:
      - templates
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '204':
          description: No response body
  /api/templates/{template_id}/remove/:
    delete:
      operationId: templates_remove_destroy
      parameters:
      - in: path
        name: template_id
        schema:
          type: integer
        required: true
      tags:
      - templates
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '204':
          description: No response body
  /api/templates/{template_id}/templatequestions/:
    get:
      operationId: templates_templatequestions_retrieve
      parameters:
      - in: path
        name: template_id
        schema:
          type: integer
        required: true
      tags:
      - templates
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
  /api/templates/{template_id}/topics/:
    get:
      operationId: templates_topics_retrieve_2
      parameters:
      - in: path
        name: template_id
        schema:
          type: integer
        required: true
      tags:
      - templates
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
  /api/templates/{template_id}/topics/{template_topic_id}/:
    get:
      operationId: templates_topics_retrieve_3
      parameters:
      - in: path
        name: template_id
        schema:
          type: integer
        required: true
      - in: path
        name: template_topic_id
        schema:
          type: integer
        required: true
      tags:
      - templates
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
  /api/templates/{template_id}/topics/{template_topic_id}/edit/:
    put:
      operationId: templates_topics_edit_update
      parameters:
      - in: path
        name: template_id
        schema:
          type: integer
        required: true
      - in: path
        name: template_topic_id
        schema:
          type: integer
        required: true
      tags:
      - templates
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
  /api/templates/{template_id}/topics/{template_topic_id}/remove/:
    delete:
      operationId: templates_topics_remove_destroy
      parameters:
      - in: path
        name: template_id
        schema:
          type: integer
        required: true
      - in: path
        name: template_topic_id
        schema:
          type: integer
        required: true
      tags:
      - templates
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '204':
          description: No response body
  /api/templates/{template_id}/topics/add/:
    post:
      operationId: templates_topics_add_create
      parameters:
      - in: path
        name: template_id
        schema:
          type: integer
        required: true
      tags:
      - templates
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
  /api/templates/add/:
    post:
      operationId: templates_add_create
      tags:
      - templates
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
  /api/templates/template_questions/:
    get:
      operationId: templates_template_questions_list
      tags:
      - templates
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TemplateQuestion'
          description: ''
    post:
      operationId: templates_template_questions_create
      tags:
      - templates
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TemplateQuestion'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TemplateQuestion'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TemplateQuestion'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateQuestion'
          description: ''
  /api/templates/template_questions/{id}/:
    get:
      operationId: templates_template_questions_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - templates
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateQuestion'
          description: ''
    put:
      operationId: templates_template_questions_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - templates
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TemplateQuestion'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TemplateQuestion'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TemplateQuestion'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateQuestion'
          description: ''
    patch:
      operationId: templates_template_questions_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - templates
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTemplateQuestion'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTemplateQuestion'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTemplateQuestion'
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateQuestion'
          description: ''
    delete:
      operationId: templates_template_questions_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - templates
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '204':
          description: No response body
  /api/templates/templates/:
    get:
      operationId: templates_templates_list
      tags:
      - templates
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Templates'
          description: ''
    post:
      operationId: templates_templates_create
      tags:
      - templates
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Templates'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Templates'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Templates'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Templates'
          description: ''
  /api/templates/templates/{id}/:
    get:
      operationId: templates_templates_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - templates
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Templates'
          description: ''
    put:
      operationId: templates_templates_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - templates
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Templates'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Templates'
          application/json:
            schema:
              $ref: '#/components/schemas/Templates'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Templates'
          description: ''
    patch:
      operationId: templates_templates_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - templates
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTemplates'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTemplates'
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTemplates'
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Templates'
          description: ''
    delete:
      operationId: templates_templates_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - templates
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '204':
          description: No response body
  /api/templates/topics/:
    get:
      operationId: templates_topics_list
      tags:
      - templates
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TemplateTopic'
          description: ''
    post:
      operationId: templates_topics_create
      tags:
      - templates
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TemplateTopic'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TemplateTopic'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TemplateTopic'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateTopic'
          description: ''
  /api/templates/topics/{id}/:
    get:
      operationId: templates_topics_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - templates
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateTopic'
          description: ''
    put:
      operationId: templates_topics_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - templates
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TemplateTopic'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TemplateTopic'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TemplateTopic'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateTopic'
          description: ''
    patch:
      operationId: templates_topics_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - templates
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTemplateTopic'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTemplateTopic'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTemplateTopic'
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateTopic'
          description: ''
    delete:
      operationId: templates_topics_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - templates
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '204':
          description: No response body
  /api/transcription/announce_transcription_result/:
    post:
      operationId: transcription_announce_transcription_result_create
      tags:
      - transcription
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
  /api/transcription/generate_transcript_for_interview_round/:
    get:
      operationId: transcription_generate_transcript_for_interview_round_retrieve
      tags:
      - transcription
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: transcription_generate_transcript_for_interview_round_create
      tags:
      - transcription
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
  /api/transcription/get_transcripts_for_questions/{interview_round_id}/:
    get:
      operationId: transcription_get_transcripts_for_questions_retrieve
      parameters:
      - in: path
        name: interview_round_id
        schema:
          type: integer
        required: true
      tags:
      - transcription
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: transcription_get_transcripts_for_questions_create
      parameters:
      - in: path
        name: interview_round_id
        schema:
          type: integer
        required: true
      tags:
      - transcription
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
  /api/user/{user_id}/company/{id}/departments/:
    get:
      operationId: user_company_departments_list
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - user
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Department'
          description: ''
  /api/user/delete/:
    delete:
      operationId: user_delete_destroy
      description: Endpoint for deactivating the user's account.
      tags:
      - user
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: User account deactivated
        '404':
          description: User not found or is not active
  /api/user/userdetails/:
    get:
      operationId: user_userdetails_retrieve
      tags:
      - user
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUserDetails'
          description: ''
    put:
      operationId: user_userdetails_update
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomUserDetails'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomUserDetails'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomUserDetails'
        required: true
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUserDetails'
          description: ''
    patch:
      operationId: user_userdetails_partial_update
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCustomUserDetails'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCustomUserDetails'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCustomUserDetails'
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUserDetails'
          description: ''
  /api/user/usersbyid/{candidate_id}/:
    get:
      operationId: user_usersbyid_retrieve
      parameters:
      - in: path
        name: candidate_id
        schema:
          type: string
        required: true
      tags:
      - user
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
  /api/user/usersbyusername/{username}/:
    get:
      operationId: user_usersbyusername_retrieve
      parameters:
      - in: path
        name: username
        schema:
          type: string
        required: true
      tags:
      - user
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
  /api/videosdk/meetingroom/{room_name}:
    get:
      operationId: videosdk_meetingroom_retrieve
      parameters:
      - in: path
        name: room_name
        schema:
          type: string
        required: true
      tags:
      - videosdk
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: videosdk_meetingroom_create
      parameters:
      - in: path
        name: room_name
        schema:
          type: string
        required: true
      tags:
      - videosdk
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: videosdk_meetingroom_destroy
      parameters:
      - in: path
        name: room_name
        schema:
          type: string
        required: true
      tags:
      - videosdk
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '204':
          description: No response body
  /api/videosdk/meetingroom/create:
    get:
      operationId: videosdk_meetingroom_create_retrieve
      tags:
      - videosdk
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: videosdk_meetingroom_create_create
      tags:
      - videosdk
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: videosdk_meetingroom_create_destroy
      tags:
      - videosdk
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '204':
          description: No response body
  /api/videosdk/meetingroom/delete-all:
    get:
      operationId: videosdk_meetingroom_delete_all_retrieve
      tags:
      - videosdk
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: videosdk_meetingroom_delete_all_create
      tags:
      - videosdk
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
    delete:
      operationId: videosdk_meetingroom_delete_all_destroy
      tags:
      - videosdk
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '204':
          description: No response body
  /api/videosdk/meetingroom/token:
    get:
      operationId: videosdk_meetingroom_token_retrieve
      tags:
      - videosdk
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: videosdk_meetingroom_token_create
      tags:
      - videosdk
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
  /api/videosdk/meetingroom/token/{token}:
    get:
      operationId: videosdk_meetingroom_token_retrieve_2
      parameters:
      - in: path
        name: token
        schema:
          type: string
        required: true
      tags:
      - videosdk
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: videosdk_meetingroom_token_create_2
      parameters:
      - in: path
        name: token
        schema:
          type: string
        required: true
      tags:
      - videosdk
      security:
      - jwtHeaderAuth: []
      - jwtCookieAuth: []
      responses:
        '200':
          description: No response body
components:
  schemas:
    AddCompanyMemberAction:
      type: object
      properties:
        invitee:
          type: string
      required:
      - invitee
    Candidate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          maxLength: 200
        name:
          type: string
          maxLength: 200
        email:
          type: string
          nullable: true
          maxLength: 200
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        deleted_at:
          type: string
          format: date-time
          nullable: true
        company:
          type: string
          nullable: true
        user:
          type: string
          nullable: true
        deleted_by:
          type: string
          nullable: true
      required:
      - created_at
      - id
      - name
      - updated_at
      - username
    CommonResponse:
      type: object
      properties:
        detail:
          type: string
      required:
      - detail
    Company:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
          maxLength: 200
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        deleted_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
      required:
      - created_at
      - deleted_at
      - id
      - name
      - updated_at
    CompanyMember:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          readOnly: true
        first_name:
          type: string
          readOnly: true
        last_name:
          type: string
          nullable: true
          readOnly: true
        email:
          type: string
          format: email
          title: Email address
          readOnly: true
        role:
          type: string
          readOnly: true
        profile_picture:
          type: string
          format: uri
          nullable: true
          readOnly: true
      required:
      - email
      - first_name
      - id
      - last_name
      - profile_picture
      - role
      - username
    CustomUserDetails:
      type: object
      description: User model w/o password
      properties:
        pk:
          type: string
          title: Id
          maxLength: 200
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          readOnly: true
          title: Email address
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          nullable: true
          maxLength: 150
        profile_picture:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        companies:
          type: string
          readOnly: true
      required:
      - companies
      - email
      - pk
      - username
    Department:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
      required:
      - id
      - title
    DepartmentMembers:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          readOnly: true
        first_name:
          type: string
          readOnly: true
        last_name:
          type: string
          nullable: true
          readOnly: true
        email:
          type: string
          format: email
          title: Email address
          readOnly: true
        role:
          type: string
          readOnly: true
        profile_picture:
          type: string
          format: uri
          nullable: true
          readOnly: true
      required:
      - email
      - first_name
      - id
      - last_name
      - profile_picture
      - role
      - username
    DifficultyEnum:
      enum:
      - 1
      - 2
      - 3
      type: integer
      description: |-
        * `1` - Low
        * `2` - Medium
        * `3` - High
    Error:
      type: object
      properties:
        detail:
          type: string
      required:
      - detail
    File:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        file:
          type: string
          format: uri
        uploaded_at:
          type: string
          format: date-time
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        deleted_at:
          type: string
          format: date-time
          nullable: true
      required:
      - created_at
      - file
      - id
      - updated_at
      - uploaded_at
    InterviewRoundQuestion:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        rating:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        deleted_at:
          type: string
          format: date-time
          nullable: true
        interview_round:
          type: integer
        question:
          type: integer
        company:
          type: string
          nullable: true
        user:
          type: string
          nullable: true
        deleted_by:
          type: string
          nullable: true
      required:
      - created_at
      - id
      - interview_round
      - question
      - updated_at
    InterviewerFeedback:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        question_text:
          type: string
          readOnly: true
        note:
          type: string
          nullable: true
        reaction:
          nullable: true
          minimum: -2147483648
          maximum: 2147483647
          oneOf:
          - $ref: '#/components/schemas/ReactionEnum'
          - $ref: '#/components/schemas/NullEnum'
        time:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          readOnly: true
        deleted_at:
          type: string
          format: date-time
          nullable: true
        user:
          type: string
        interview_round:
          type: integer
        template_question:
          type: integer
          nullable: true
        company:
          type: string
          nullable: true
        deleted_by:
          type: string
          nullable: true
      required:
      - id
      - interview_round
      - question_text
      - updated_at
      - user
    Login:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
      required:
      - password
    NullEnum:
      enum:
      - null
    PatchedCompany:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
          maxLength: 200
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        deleted_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
    PatchedCustomUserDetails:
      type: object
      description: User model w/o password
      properties:
        pk:
          type: string
          title: Id
          maxLength: 200
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          readOnly: true
          title: Email address
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          nullable: true
          maxLength: 150
        profile_picture:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        companies:
          type: string
          readOnly: true
    PatchedQuestion:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        difficulty:
          $ref: '#/components/schemas/DifficultyEnum'
        question_text:
          type: string
          maxLength: 200
        embedding:
          type: string
          nullable: true
        guidelines:
          type: string
        reply_time:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        competency:
          type: string
          nullable: true
          maxLength: 200
        review:
          nullable: true
          minimum: -2147483648
          maximum: 2147483647
          oneOf:
          - $ref: '#/components/schemas/ReviewEnum'
          - $ref: '#/components/schemas/NullEnum'
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        deleted_at:
          type: string
          format: date-time
          nullable: true
        company:
          type: string
          nullable: true
        user:
          type: string
          nullable: true
        deleted_by:
          type: string
          nullable: true
    PatchedQuestionBank:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        deleted_at:
          type: string
          format: date-time
          nullable: true
        company:
          type: string
          nullable: true
        user:
          type: string
          nullable: true
        deleted_by:
          type: string
          nullable: true
    PatchedQuestionBankUpdate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        questions:
          type: array
          items:
            type: integer
        title:
          type: string
          maxLength: 255
        description:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        deleted_at:
          type: string
          format: date-time
          nullable: true
        company:
          type: string
          nullable: true
        user:
          type: string
          nullable: true
        deleted_by:
          type: string
          nullable: true
    PatchedTemplateQuestion:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        deleted_at:
          type: string
          format: date-time
          nullable: true
        template_id:
          type: integer
        topic:
          type: integer
        question:
          type: integer
        deleted_by:
          type: string
          nullable: true
    PatchedTemplateTopic:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        topics_text:
          type: string
          maxLength: 200
        time:
          allOf:
          - $ref: '#/components/schemas/TimeEnum'
          minimum: 0
          maximum: 32767
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          readOnly: true
        deleted_at:
          type: string
          format: date-time
          nullable: true
        template_id:
          type: integer
        company:
          type: string
        user:
          type: string
          nullable: true
        deleted_by:
          type: string
          nullable: true
    PatchedTemplates:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        department:
          type: string
          readOnly: true
        department_id:
          type: integer
          writeOnly: true
          nullable: true
        company:
          type: string
          writeOnly: true
        interviewers:
          type: array
          items:
            type: string
            writeOnly: true
          writeOnly: true
        role_title:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        image:
          type: string
          format: uri
          nullable: true
        deleted_at:
          type: string
          format: date-time
          nullable: true
        user:
          type: string
          nullable: true
        deleted_by:
          type: string
          nullable: true
    Question:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        difficulty:
          $ref: '#/components/schemas/DifficultyEnum'
        question_text:
          type: string
          maxLength: 200
        embedding:
          type: string
          nullable: true
        guidelines:
          type: string
        reply_time:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        competency:
          type: string
          nullable: true
          maxLength: 200
        review:
          nullable: true
          minimum: -2147483648
          maximum: 2147483647
          oneOf:
          - $ref: '#/components/schemas/ReviewEnum'
          - $ref: '#/components/schemas/NullEnum'
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        deleted_at:
          type: string
          format: date-time
          nullable: true
        company:
          type: string
          nullable: true
        user:
          type: string
          nullable: true
        deleted_by:
          type: string
          nullable: true
      required:
      - created_at
      - difficulty
      - guidelines
      - id
      - question_text
      - reply_time
      - updated_at
    QuestionBank:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        questions:
          type: array
          items:
            $ref: '#/components/schemas/Question'
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        deleted_at:
          type: string
          format: date-time
          nullable: true
        company:
          type: string
          nullable: true
        user:
          type: string
          nullable: true
        deleted_by:
          type: string
          nullable: true
      required:
      - created_at
      - description
      - id
      - questions
      - title
      - updated_at
    QuestionBankUpdate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        questions:
          type: array
          items:
            type: integer
        title:
          type: string
          maxLength: 255
        description:
          type: string
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        deleted_at:
          type: string
          format: date-time
          nullable: true
        company:
          type: string
          nullable: true
        user:
          type: string
          nullable: true
        deleted_by:
          type: string
          nullable: true
      required:
      - created_at
      - description
      - id
      - title
      - updated_at
    ReactionEnum:
      enum:
      - 1
      - 2
      - 3
      - 4
      - 5
      type: integer
      description: |-
        * `1` - Fire
        * `2` - Thumbs Up
        * `3` - Thumbs Down
        * `4` - Heart
        * `5` - Laugh
    RestAuthDetail:
      type: object
      properties:
        detail:
          type: string
          readOnly: true
      required:
      - detail
    ReviewEnum:
      enum:
      - 1
      - 2
      - 3
      - 4
      - 5
      type: integer
      description: |-
        * `1` - One
        * `2` - Two
        * `3` - Three
        * `4` - Four
        * `5` - Five
    TemplateQuestion:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        deleted_at:
          type: string
          format: date-time
          nullable: true
        template_id:
          type: integer
        topic:
          type: integer
        question:
          type: integer
        deleted_by:
          type: string
          nullable: true
      required:
      - created_at
      - id
      - question
      - template_id
      - topic
      - updated_at
    TemplateTopic:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        topics_text:
          type: string
          maxLength: 200
        time:
          allOf:
          - $ref: '#/components/schemas/TimeEnum'
          minimum: 0
          maximum: 32767
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          readOnly: true
        deleted_at:
          type: string
          format: date-time
          nullable: true
        template_id:
          type: integer
        company:
          type: string
        user:
          type: string
          nullable: true
        deleted_by:
          type: string
          nullable: true
      required:
      - company
      - id
      - template_id
      - topics_text
      - updated_at
    Templates:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        department:
          type: string
          readOnly: true
        department_id:
          type: integer
          writeOnly: true
          nullable: true
        company:
          type: string
          writeOnly: true
        interviewers:
          type: array
          items:
            type: string
            writeOnly: true
          writeOnly: true
        role_title:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        image:
          type: string
          format: uri
          nullable: true
        deleted_at:
          type: string
          format: date-time
          nullable: true
        user:
          type: string
          nullable: true
        deleted_by:
          type: string
          nullable: true
      required:
      - company
      - department
      - id
      - interviewers
      - role_title
    TimeEnum:
      enum:
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      - 9
      - 10
      - 11
      - 12
      - 13
      - 14
      - 15
      - 16
      - 17
      - 18
      - 19
      - 20
      - 21
      - 22
      - 23
      - 24
      - 25
      - 26
      - 27
      - 28
      - 29
      - 30
      - 31
      - 32
      - 33
      - 34
      - 35
      - 36
      - 37
      - 38
      - 39
      - 40
      - 41
      - 42
      - 43
      - 44
      - 45
      - 46
      - 47
      - 48
      - 49
      - 50
      - 51
      - 52
      - 53
      - 54
      - 55
      - 56
      - 57
      - 58
      - 59
      - 60
      type: integer
      description: |-
        * `1` - 1
        * `2` - 2
        * `3` - 3
        * `4` - 4
        * `5` - 5
        * `6` - 6
        * `7` - 7
        * `8` - 8
        * `9` - 9
        * `10` - 10
        * `11` - 11
        * `12` - 12
        * `13` - 13
        * `14` - 14
        * `15` - 15
        * `16` - 16
        * `17` - 17
        * `18` - 18
        * `19` - 19
        * `20` - 20
        * `21` - 21
        * `22` - 22
        * `23` - 23
        * `24` - 24
        * `25` - 25
        * `26` - 26
        * `27` - 27
        * `28` - 28
        * `29` - 29
        * `30` - 30
        * `31` - 31
        * `32` - 32
        * `33` - 33
        * `34` - 34
        * `35` - 35
        * `36` - 36
        * `37` - 37
        * `38` - 38
        * `39` - 39
        * `40` - 40
        * `41` - 41
        * `42` - 42
        * `43` - 43
        * `44` - 44
        * `45` - 45
        * `46` - 46
        * `47` - 47
        * `48` - 48
        * `49` - 49
        * `50` - 50
        * `51` - 51
        * `52` - 52
        * `53` - 53
        * `54` - 54
        * `55` - 55
        * `56` - 56
        * `57` - 57
        * `58` - 58
        * `59` - 59
        * `60` - 60
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
      - token
  securitySchemes:
    jwtCookieAuth:
      type: apiKey
      in: cookie
      name: access_token
    jwtHeaderAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
