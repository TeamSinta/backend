version: '3.8'

services:
  db:
    container_name: sinta-staging-db
    build:
      context: ./database
    volumes:
      - dbdata:/var/lib/postgresql/data
    env_file:
      - ./api/config/staging/.env.staging
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    networks:
      - backend-network

  backend:
    container_name: sinta-staging-api
  build:
    context: ./api
    dockerfile: dev.Dockerfile
  command: python manage.py runserver 0.0.0.0:8000
  volumes:
    - ./api:/backend
  ports:
    - 8000:8000
  depends_on:
    - db
  env_file:
    - ./api/config/staging/.env.staging
  environment:
    - ENVIRONMENT=staging
    - CELERY_BROKER_URL=redis://default:yUmvoLfJKngsQigfMDPYdxpYPZJGiWQE@redis.railway.internal:6379
    - CELERY_RESULT_BACKEND=redis://default:yUmvoLfJKngsQigfMDPYdxpYPZJGiWQE@redis.railway.internal:6379
  networks:
    - backend-network

  celery_worker:
    container_name: sinta-production-celery-worker
    build:
      context: ./api
      dockerfile: Dockerfile  # Ensure this is production-ready
    command: celery -A your_project_name worker --loglevel=info
    volumes:
      - ./api:/backend
    env_file:
      - ./api/config/production/.env.production  # Ensure you have a production env file
    environment:
      - CELERY_BROKER_URL=redis://default:<REDIS_PASSWORD>@<REDIS_HOST>:<REDIS_PORT>
      - CELERY_RESULT_BACKEND=redis://default:<REDIS_PASSWORD>@<REDIS_HOST>:<REDIS_PORT>
    depends_on:
      - db
      - redis  # Assuming `redis` is the service name in your docker-compose
    networks:
      - backend-network



volumes:
  dbdata:

networks:
  backend-network:
    driver: bridge
